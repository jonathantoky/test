from langchain_core.tools import StructuredTool\nfrom pydantic import BaseModel, Field\nfrom typing import List, Any\nimport requests\n\n# Prediction tools\nclass CreatePredictionInput(BaseModel):\n    model_id: str = Field(description=\"The ID of the model to use for prediction.\")\n    input_data: Any = Field(description=\"Input data for the prediction.\")\n\nclass GetPredictionInput(BaseModel):\n    prediction_id: str = Field(description=\"The ID of the prediction to retrieve.\")\n\nclass ListPredictionsInput(BaseModel):\n    pass\n\nclass CancelPredictionInput(BaseModel):\n    prediction_id: str = Field(description=\"The ID of the prediction to cancel.\")\n\n\ndef create_prediction_replicate(name, description, token):\n    \"\"\"\n    Creates a new prediction using a specified model.\n    \"\"\"\n    def create_prediction(model_id: str, input_data: Any) -> dict:\n        headers = {'Authorization': f'Token {token}', 'Content-Type': 'application/json'}\n        response = requests.post('https://api.replicate.com/v1/predictions', headers=headers, json={\n            'model': model_id,\n            'input': input_data\n        })\n        return response.json()\n    return StructuredTool.from_function(\n        func=create_prediction,\n        name=name,\n        description=description,\n        args_schema=CreatePredictionInput,\n        return_direct=True,\n    )\n\n\ndef get_prediction_replicate(name, description, token):\n    \"\"\"\n    Retrieves details of a specific prediction.\n    \"\"\"\n    def get_prediction(prediction_id: str) -> dict:\n        headers = {'Authorization': f'Token {token}'}\n        response = requests.get(f'https://api.replicate.com/v1/predictions/{prediction_id}', headers=headers)\n        return response.json()\n    return StructuredTool.from_function(\n        func=get_prediction,\n        name=name,\n        description=description,\n        args_schema=GetPredictionInput,\n        return_direct=True,\n    )\n\n# Additional prediction-related functions would go here...