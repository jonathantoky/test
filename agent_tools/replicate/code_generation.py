from langchain_core.tools import StructuredTool\nfrom pydantic import BaseModel, Field\nfrom typing import Any\nimport requests\n\n# Code generation tools\nclass GenerateCodeInput(BaseModel):\n    prompt: str = Field(description=\"Prompt for code generation.\")\n\nclass OptimizeCodeInput(BaseModel):\n    code: str = Field(description=\"Code to optimize.\")\n\nclass DebugCodeInput(BaseModel):\n    code: str = Field(description=\"Code to debug.\")\n\n\ndef generate_code_replicate(name, description, token):\n    \"\"\"\n    Generates code based on a prompt.\n    \"\"\"\n    def generate_code(prompt: str) -> str:\n        headers = {'Authorization': f'Token {token}', 'Content-Type': 'application/json'}\n        response = requests.post('https://api.replicate.com/v1/code/generate', headers=headers, json={\n            'prompt': prompt\n        })\n        return response.json()\n    return StructuredTool.from_function(\n        func=generate_code,\n        name=name,\n        description=description,\n        args_schema=GenerateCodeInput,\n        return_direct=True,\n    )\n\n\ndef optimize_code_replicate(name, description, token):\n    \"\"\"\n    Optimizes existing code.\n    \"\"\"\n    def optimize_code(code: str) -> str:\n        headers = {'Authorization': f'Token {token}', 'Content-Type': 'application/json'}\n        response = requests.post('https://api.replicate.com/v1/code/optimize', headers=headers, json={\n            'code': code\n        })\n        return response.json()\n    return StructuredTool.from_function(\n        func=optimize_code,\n        name=name,\n        description=description,\n        args_schema=OptimizeCodeInput,\n        return_direct=True,\n    )\n\n\ndef debug_code_replicate(name, description, token):\n    \"\"\"\n    Debugs provided code.\n    \"\"\"\n    def debug_code(code: str) -> str:\n        headers = {'Authorization': f'Token {token}', 'Content-Type': 'application/json'}\n        response = requests.post('https://api.replicate.com/v1/code/debug', headers=headers, json={\n            'code': code\n        })\n        return response.json()\n    return StructuredTool.from_function(\n        func=debug_code,\n        name=name,\n        description=description,\n        args_schema=DebugCodeInput,\n        return_direct=True,\n    )\n\n# Additional code generation functions would go here...